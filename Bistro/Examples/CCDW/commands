## with true Q, mcmc 1million, lambda=0.19
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro9 -r 1000 -b 1000 > bistro9.log

## with true Q as starting point, but without average of burnin, with longer mcmc chain, lambda=0.45
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro8 -r 1000 -b 1000 > bistro8.log

## with true Q as starting point, but without average of burnin, with longer mcmc chain
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro7 -r 1000 -b 1000 > bistro7.log

## with true Q after mcmc: this does not work!
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro6 -r 1000 -b 1000 > bistro6.log

## with true Q as starting point, but without average of burnin
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro5 -r 1000 -b 1000 > bistro5.log

## without true Q as starting point, but without average of burnin
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro4 -r 1000 -b 1000 > bistro4.log

## with true Q as starting point, and half scale
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro3 -r 1000 -b 1000 > bistro3.log

## with true Q as starting point
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro2 -r 1000 -b 1000 > bistro2.log

## run bistro with good code
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o bistro1 -r 1000 -b 1000 > bistro1.log

## to run bmcmc
../../Code/bistro/bmcmc -f ../../Data/ccdw.fasta -o mcmc1 -r 10000 -b 1000 -t "(1,2,(3,4));" > mcmc1.log
../../Code/bistro/bmcmc -f ../../Data/ccdw.fasta -o mcmc2 -r 100000 -b 10000 -t "(1,2,(3,4));" > mcmc2.log

## after going back to mcmc for Q only, but doing MLE for jctree in between
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o mcmc-q-mle -r 1000 -b 1000 > mcmc-q-mle.log
## with 2 passes:
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o mcmc-q-mle-2 -r 1000 -b 1000 > mcmc-q-mle-2.log

## after removing scale/5 for yy
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o mcmc-bl-2 -r 1000 -b 1000 > mcmc-bl-2.log

## after changing mcmc to do bl
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o randQ-scale5-4 -r 1000 -b 1000 -s 1948444759 > randQ-scale5-4.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o mcmc-bl -r 1000 -b 1000 > mcmc-bl.log

## after adding scale depending on mcmc variance
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o randQ-scale5-3 -r 1000 -b 1000 -s 1948444759 > randQ-scale5-3.log

## to compare with the new formula for avgP and avgS
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o randQ-scale5-2 -r 1000 -b 1000 -s 1948444759 > randQ-scale5-2.log

## test with new scale to dirichlet
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o randQ-scale5 -r 1000 -b 1000 > randQ-scale5.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o randQ-scale6 -r 1000 -b 1000 > randQ-scale6.log

## test without jacobian to compare fixedQ and not fixed
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o fixQ -r 1000 -b 1000 --fixedQ > fixQ.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o fixQ2 -r 1000 -b 1000 --fixedQ -s 449464908 > fixQ2.log

## test without/with jacobian
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o withoutJ -r 1000 -b 1000 --eta 0.8 -s 449464908 > withoutJ.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o withJ -r 1000 -b 1000 --eta 0.8 -s 449464908 > withJ.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o withJ-wt -r 1000 -b 1000 --eta 0.8 -s 449464908 --weightMean > withJ-wt.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o withJ-2 -r 1000 -b 1000 --eta 0.8 > withJ-2.log

## after modifying the way z1 is created
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test11-2 -r 1000 -b 1000 --eta 0.8 -s 449464908 > test11-2.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test11-3 -r 1000 -b 1000 --eta 0.6 -s 449464908 > test11-3.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test11-3-wt -r 1000 -b 1000 --eta 0.6 -s 449464908 --weightMean > test11-3-wt.log

## after testing using mu[0] instead of mu0 for x1
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test10 -r 1000 -b 1000 > test10.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test11 -r 1000 -b 1000 --eta 0.8 > test11.log

## after adding print to see when enters the alpha<1 case
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test9 -r 1000 -b 1000 --threads 1 > test9.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test9-2 -r 1000 -b 1000 > test9-2.log


## after multiplying by eta after alpha<1 check
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test8 -r 1000 -b 1000 > test8.log
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test8-eta08 -r 1000 -b 1000 --eta 0.8 > test8-eta08.log


../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test2 -r 1000 -b 1000 > test2.log

../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test5 -r 1000 -b 1000 --threads 1 -eta 0.8 > test5.log

## this one has to have ~5% ESS, I don't get it
../../Code/bistro/bistro -f ../../Data/ccdw.fasta -o test7 -r 1000 -b 1000 --threads 1 --eta 0.8 -s 372873156 > test7.log


--------------------------------
../../Code/bistro/bccd -f ../../Data/ccdw.fasta -o ccd -r 1000 -b 1000 > ccd.log