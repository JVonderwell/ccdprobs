seed=0646 in simulateData.r with
d1x0 = 0.11
d2x0 = 0.078
dxy0 = 0.03
d3y0 = 0.091
d4y0 = 0.098

* multinormal: we want to compare computation with R
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965 --mvnormal -n 1 --verbose >& screen646_norm_1.txt
mv logw.txt logw646_norm_1.txt
mv par3D.txt par3D_646_norm_1.txt
mv par2D.txt par2D_646_norm_1.txt



----------------------------------------------------
after fixing loglik, but still not the same results
in R and C++
----------------------------------------------------

* multinormal
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965 --mvnormal
mv logw.txt logw646_norm_full.txt
mv par3D.txt par3D_646_norm_full.txt
mv par2D.txt par2D_646_norm_full.txt

then compareLogLikComputation.r: logw646_norm_full.Rda
c++ logw ESS ~15%
R logw ESS ~16%
not the 40% that we used to get, could it have been an artifact of the
lack of randomization? no.
try again without randomizing:
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965 --mvnormal
mv logw.txt logw646_norm_nonrand.txt
mv par3D.txt par3D_646_norm_nonrand.txt
mv par2D.txt par2D_646_norm_nonrand.txt
=> does not work, worse ESS ~1%

## seems that range of internal bl in c++ is wider than in R
> summary(dataC$bl2)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.
0.009314 0.029320 0.038820 0.042910 0.057950 0.087690
> summary(dataR$dxy.cond)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
0.01158 0.02679 0.03155 0.03190 0.03656 0.05615

* gammabeta
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965
mv logw.txt logw646_gam_full.txt
mv par3D.txt par3D_646_gam_full.txt
mv par2D.txt par2D_646_gam_full.txt

then compareLogLikComputation.r: logw646_gam_full.Rda
ESS worse ~8%, but when using logwR, we get 14%.
> summary(dataC$bl2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
0.00983 0.02893 0.03885 0.04258 0.05671 0.10420
> summary(dataR$dxy.cond)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
0.01225 0.02660 0.03190 0.03230 0.03718 0.06139






---------------------------------------------------------
before fixing loglik
--------------------------------------------------------

* multinormal
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965 --mvnormal
mv logw.txt logw646_norm_full.txt

(4,3,(2,1));
numTaxa = 4, numNodes = 6, numEdges = 5
Nodes:
  1: 1: 2: Edges: e[5] -> n[6]
  2: 2: 2: Edges: e[1] -> n[6]
  3: 3: 1: Edges: e[3] -> n[5]
  4: 4: 1: Edges: e[4] -> n[5]
  5: : 0: Edges: e[4] -> n[4], e[3] -> n[3], e[2] -> n[6]
  6: : 1: Edges: e[1] -> n[2], e[2] -> n[5], e[5] -> n[1]
Edges:
  1: n[2] <-> n[6] length = 0.10887564
  2: n[5] <-> n[6] length = 0.031958231
  3: n[3] <-> n[5] length = 0.075539508
  4: n[4] <-> n[5] length = 0.084012041
  5: n[1] <-> n[6] length = 0.10647354

(1)--5--(6)--2--(5)--3--(3)
         |       |
(2)--1---         --4--(4)

order: d2x,dxy,d3y,d4y,d1x

* in R: compareLogLikComputation.r
loglik from C++ identical in all rows, when using loglik from R,
weights behave as expected: ESS ~47%


* gamma/beta
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965
mv logw.txt logw646_gam_full.txt
((4,3),1,2);
numTaxa = 4, numNodes = 6, numEdges = 5
Nodes:
  1: 1: 1: Edges: e[5] -> n[6]
  2: 2: 1: Edges: e[1] -> n[6]
  3: 3: 2: Edges: e[3] -> n[5]
  4: 4: 2: Edges: e[4] -> n[5]
  5: : 1: Edges: e[4] -> n[4], e[3] -> n[3], e[2] -> n[6]
  6: : 0: Edges: e[2] -> n[5], e[5] -> n[1], e[1] -> n[2]
Edges:
  1: n[2] <-> n[6] length = 0.10590384
  2: n[5] <-> n[6] length = 0.070698314
  3: n[3] <-> n[5] length = 0.088573237
  4: n[4] <-> n[5] length = 0.078284081
  5: n[1] <-> n[6] length = 0.091279525

* in R: compareLogLikComputation.r
ESS ~0.1%, two big weights: 0.72,0.26 when changing to the loglikR
(not identical)


-----------------------------------------------------------------------------
first run: compare ESS
-----------------------------------------------------------------------------
* gamma/beta
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q  0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965
mv logw.txt logw646.txt
then studyWeights.r:
summary(dat$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  -2021  342400  686100  686000 1030000 1374000

* multinormal
./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965 --mvnormal
mv logw.txt logw646_norm.txt
then studyWeights.r:
> summary(dat$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  -3350   -3349   -3349   -3349   -3348   -3343
> length(w[w>0.01])
[1] 12
> (1/sum(w^2))/1000
[1] 0.04139058

./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965 --mvnormal
mv logw.txt logw646_norm2.txt
> summary(dat$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  -3350   -3349   -3349   -3349   -3348   -3340
> length(w[w>0.01])
[1] 7
> w[w>0.01]
[1] 0.02846970 0.04464937 0.01123282 0.01006275 0.57757615 0.02284747 0.01123282
> (1/sum(w^2))/1000
[1] 0.002960261

./bl -f "../../Data/simSeq646.fasta" -t "(2,(3,4),1);" -q 0.8939155,0.5665839,0.7996356,0.3776861,0.1169551,0.9320103 -p 0.04736586,0.08641125,0.76855324,0.09766965 --mvnormal
mv logw.txt logw646_norm3.txt
> summary(dat$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  -3347   -3346   -3345   -3345   -3345   -3338
> length(w[w>0.01])
[1] 13
> w[w>0.01]
 [1] 0.20351337 0.01119796 0.01044091 0.04150159 0.01409375 0.02323667
 [7] 0.01452297 0.21826976 0.02254992 0.03466504 0.02370608 0.01153899
[13] 0.01738715
> (1/sum(w^2))/1000
[1] 0.01048866

* multinormal in R
Compare to scripts/simulations_normal.r with same seed:
> summary(data$logwv.cond)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  -3201   -3195   -3194   -3195   -3194   -3191
> (1/sum(data$w.joint^2))/nreps
[1] 0.9356885
> (1/sum(data$w.cond^2))/nreps
[1] 0.38645
(data was not saved!, need to rerun)

